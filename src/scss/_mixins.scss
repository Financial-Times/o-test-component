/// The main stlyes fo a big test component.
@mixin oTestComponentBig() {
    @include _oTestComponentBase();
    height: _oTestComponentGetSize(1);
    width: _oTestComponentGetSize(1);
}

/// The main styles for a small test component.
@mixin oTestComponentSmall() {
    @include _oTestComponentBase();
    height: _oTestComponentGetSize(2);
    width: _oTestComponentGetSize(2);
}

/// Output CSS only if a given feature is supported.
/// @content Conditional CSS styles.
/// @example scss
///     @include oTestComponentIfFeature($feature: 'small') {
///         .o-test-component-small--mymodifier {
///             border-color: blue;
///         };
///     }
@mixin oTestComponentIfFeature($feature) {
    @if map-get($map: $features, $key: $feature) {
        @content;
    }
}

/// Applies to a test component.
/// @example scss A big test component with a custom theme.
///     .my-test-component {
///         @include oTestComponentBig();
///         @include oTestComponentTheme($theme: (primary-color: red, secondary-color: blue));
///     }
/// @see {mixin} oTestComponentBig
/// @see {mixin} oTestComponentSmall
/// @param {Map} $theme - Apply a custom theme to the component. Theme keys include 'primary-color' and 'secondary-color' (see example).
/// @exception An invalid theme will throw an error.
@mixin oTestComponentTheme($theme) {
    @if type-of(theme) != 'map' {
        @include _oTestComponentThrowError('Invalid theme.');
    }
    background-color: map-get($theme, $primary-color);
    border-color: map-get($theme, $secondary-color);
}

/// B2b modifier.
/// @output Modifiying, cosmetic styles to make a test component fit the B2B look.
/// @link http://example.com Some helpful link to B2b materials.
/// @brand master
/// @since v2.0.0 All versions since support B2b styles.
/// @param {Bool} $bold [false] - To make the b2b component copy strong.
@mixin oTestComponentB2b($bold: false) {
    background-color: $o-test-component-b2b-color;
    @if $bold {
        font-weight: bold;
    }
}

/// Marketing modifier.
/// @ignore Apparently unused, so a contender for deprecation. Let's hide for now.
/// @output Modifiying, cosmetic styles to make a test component fit the marketing look.
/// @brand master
@mixin oTestComponentMarketing() {
    background-color: aqua;
}

/// Inverse modifier.
/// @output Modifiying, cosmetic styles to make a test component work on a dark background.
/// @brand internal|master
@mixin oTestComponentInverse() {
    background-color: white;
    color: darkslategray;
}

/// @access private
@mixin _oTestComponentBase() {
    border: 1px solid hotpink;
    &:after {
        content: 'Test component scss.';
    }
}

/// @group helpers
/// @examples scss - Throw an error with a message.
///    @include _oTestComponentThrowError('Something unspecified went wrong.');
/// @throw Error Throws an error with a given message.
@mixin _oTestComponentThrowError($message) {
    // :point-up: This is to test an implicitly private function.
    @error 'o-test-component says: #{$message}';
}
